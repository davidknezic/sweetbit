syntax = "proto3";

package sweetrpc;

service Sweet {
    rpc GetInfo (GetInfoRequest) returns (GetInfoResponse) {
    }
    rpc SetName (SetNameRequest) returns (SetNameResponse) {
    }
    rpc SetDispenseOnTouch (SetDispenseOnTouchRequest) returns (SetDispenseOnTouchResponse) {
    }
    rpc SetBuzzOnDispense (SetBuzzOnDispenseRequest) returns (SetBuzzOnDispenseResponse) {
    }
    rpc GetWpaConnectionInfo (GetWpaConnectionInfoRequest) returns (GetWpaConnectionInfoResponse) {
    }
    rpc ConnectWpaNetwork (ConnectWpaNetworkRequest) returns (ConnectWpaNetworkResponse) {
    }
    rpc GetWpaNetworks (GetWpaNetworksRequest) returns (GetWpaNetworksResponse) {
    }
    rpc Update (UpdateRequest) returns (UpdateResponse) {
    }
    rpc ConnectToRemoteNode (ConnectToRemoteNodeRequest) returns (ConnectToRemoteNodeResponse) {
    }
    rpc DisconnectFromRemoteNode (DisconnectFromRemoteNodeRequest) returns (DisconnectFromRemoteNodeResponse) {
    }
    rpc Reboot (RebootRequest) returns (RebootResponse) {
    }
    rpc ToggleDispenser (ToggleDispenserRequest) returns (ToggleDispenserResponse) {
    }
    rpc SubscribeDispenses (SubscribeDispensesRequest) returns (stream Dispense) {
    }
}

message GetInfoRequest {
}

message GetInfoResponse {
    string serial = 1;
    string version = 2;
    string commit = 3;
    RemoteNode remoteNode = 4;
    string name = 5;
    bool dispenseOnTouch = 6;
    bool buzzOnDispense = 7;
}

message RemoteNode {
    string uri = 1;
}

message SetNameRequest {
    string name = 1;
}

message SetNameResponse {
}

message SetDispenseOnTouchRequest {
    bool dispenseOnTouch = 1;
}

message SetDispenseOnTouchResponse {
}

message SetBuzzOnDispenseRequest {
    bool buzzOnDispense = 1;
}

message SetBuzzOnDispenseResponse {
}

message GetWpaConnectionInfoRequest {
}

message GetWpaConnectionInfoResponse {
    string ssid = 1;
    string state = 2;
    string ip = 3;
    string message = 4;
}

message ConnectWpaNetworkRequest {
    string ssid = 1;
    string psk = 2;
}

message ConnectWpaNetworkResponse {
    enum WpaConnectionUpdateState {
        CONNECTING = 0;
        CONNECTED = 1;
        FAILED = 2;
    }

    WpaConnectionUpdateState status = 1;
}

message WpaNetwork {
    string bssid = 1;
    string frequency = 2;
    string signal_level = 3;
    string flags = 4;
    string ssid = 5;
}

message GetWpaNetworksRequest {
}

message GetWpaNetworksResponse {
    repeated WpaNetwork networks = 1;
}

message UpdateRequest {
    string url = 1;
}

message UpdateResponse {
}

message ConnectToRemoteNodeRequest {
    string uri = 1;
    bytes cert = 2;
    bytes macaroon = 3;
}

message ConnectToRemoteNodeResponse {
}

message DisconnectFromRemoteNodeRequest {
}

message DisconnectFromRemoteNodeResponse {
}

message RebootRequest {
}

message RebootResponse {
}

message ToggleDispenserRequest {
    bool dispense = 1;
}

message ToggleDispenserResponse {
}

message SubscribeDispensesRequest {
}

message Dispense {
    bool dispense = 1;
}